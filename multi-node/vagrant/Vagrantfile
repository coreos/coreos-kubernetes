# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'

Vagrant.require_version ">= 1.6.0"

$update_channel = "alpha"
$controller_count = 1
$controller_vm_memory = 512
$worker_count = 1
$worker_vm_memory = 512
$etcd_count = 1
$etcd_vm_memory = 512

cwd = File.dirname(__FILE__)

CONFIG = File.join(cwd, "config.rb")
if File.exist?(CONFIG)
  require CONFIG
end

TOKEN_SIGNER_KEY = File.join(cwd, "token-signer-private.pem")
if !File.exist?(TOKEN_SIGNER_KEY)
  system("/usr/bin/openssl genrsa -out #{TOKEN_SIGNER_KEY} 4096") or abort("Failed generating RSA key")
end

ETCD_CLOUD_CONFIG_PATH = File.join(cwd, "etcd-cloud-config.yaml")
CONTROLLER_CLOUD_CONFIG_PATH = File.join(cwd, "controller-cloud-config.yaml")
WORKER_CLOUD_CONFIG_PATH = File.join(cwd, "worker-cloud-config.yaml")

def etcdIP(num)
  return "172.17.4.#{num+50}"
end

def controllerIP(num)
  return "172.17.4.#{num+100}"
end

def workerIP(num)
  return "172.17.4.#{num+200}"
end

controllerIPs = [*1..$controller_count].map{ |i| controllerIP(i) }
workerIPs = [*1..$worker_count].map{ |i| workerIP(i) }
etcdIPs = [*1..$etcd_count].map{ |i| etcdIP(i) }
initial_etcd_cluster = etcdIPs.map.with_index{ |ip, i| "e#{i+1}=http://#{ip}:2380" }.join(",")
etcd_endpoints = etcdIPs.map.with_index{ |ip, i| "http://#{ip}:2379" }.join(",")

Vagrant.configure("2") do |config|
  # always use Vagrant's insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = ">= 766.0.0"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json" % $update_channel

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v, override|
      override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json" % $update_channel
    end
  end

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v|
      v.vmx['numvcpus'] = 1
      v.gui = false
    end
  end

  config.vm.provider :virtualbox do |vb|
    vb.cpus = 1
    vb.gui = false
  end

  (1..$etcd_count).each do |i|
    config.vm.define vm_name = "e%d" % i do |etcd|

      data = YAML.load(IO.readlines(ETCD_CLOUD_CONFIG_PATH)[1..-1].join)
      data['coreos']['etcd2']['initial-cluster'] = initial_etcd_cluster
      data['coreos']['etcd2']['name'] = vm_name
      etcd_config_file = Tempfile.new('etcd_config')
      etcd_config_file.write("#cloud-config\n#{data.to_yaml}")
      etcd_config_file.close

      etcd.vm.hostname = vm_name

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        etcd.vm.provider vmware do |v|
          v.vmx['memsize'] = $etcd_vm_memory
        end
      end

      etcd.vm.provider :virtualbox do |vb|
        vb.memory = $etcd_vm_memory
      end

      etcd.vm.network :private_network, ip: etcdIP(i)

      etcd.vm.provision :file, :source => etcd_config_file.path, :destination => "/tmp/vagrantfile-user-data"
      etcd.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
    end
  end


  (1..$controller_count).each do |i|
    config.vm.define vm_name = "c%d" % i do |controller|

      env_file = Tempfile.new('env_file')
      env_file.write("ETCD_ENDPOINTS=#{etcd_endpoints}\n")
      env_file.close

      data = YAML.load(IO.readlines(CONTROLLER_CLOUD_CONFIG_PATH)[1..-1].join)
      data['coreos']['flannel']['etcd_endpoints'] = etcd_endpoints
      controller_config_file = Tempfile.new('controller_config')
      controller_config_file.write("#cloud-config\n#{data.to_yaml}")
      controller_config_file.close

      controller.vm.hostname = vm_name

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        controller.vm.provider vmware do |v|
          v.vmx['memsize'] = $controller_vm_memory
        end
      end

      controller.vm.provider :virtualbox do |vb|
        vb.memory = $controller_vm_memory
      end

      controller.vm.network :private_network, ip: controllerIP(i)

      controller.vm.provision :file, :source => TOKEN_SIGNER_KEY, :destination => "/tmp/service-account-private-key.pem"
      controller.vm.provision :shell, :inline => "mkdir -p /etc/kubernetes; mv /tmp/service-account-private-key.pem /etc/kubernetes/service-account-private-key.pem", :privileged => true

      controller.vm.provision :file, :source => env_file, :destination => "/tmp/kube-bootstrap-env"
      controller.vm.provision :shell, :inline => "mv /tmp/kube-bootstrap-env /etc/kube-bootstrap-env", :privileged => true

      controller.vm.provision :file, :source => controller_config_file.path, :destination => "/tmp/vagrantfile-user-data"
      controller.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
    end
  end

  (1..$worker_count).each do |i|
    config.vm.define vm_name = "w%d" % i do |worker|
      worker.vm.hostname = vm_name

      env_file = Tempfile.new('env_file')
      env_file.write("ETCD_ENDPOINTS=#{etcd_endpoints}\n")
      env_file.write("CONTROLLER_ENDPOINT=https://#{controllerIPs[0]}\n") #TODO(aaron): LB or DNS across control nodes
      env_file.close

      data = YAML.load(IO.readlines(WORKER_CLOUD_CONFIG_PATH)[1..-1].join)
      data['coreos']['flannel']['etcd_endpoints'] = etcd_endpoints
      worker_config_file = Tempfile.new('worker_config')
      worker_config_file.write("#cloud-config\n#{data.to_yaml}")
      worker_config_file.close

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        worker.vm.provider vmware do |v|
          v.vmx['memsize'] = $worker_vm_memory
        end
      end

      worker.vm.provider :virtualbox do |vb|
        vb.memory = $worker_vm_memory
      end

      worker.vm.network :private_network, ip: workerIP(i)

      worker.vm.provision :file, :source => env_file, :destination => "/tmp/kube-bootstrap-env"
      worker.vm.provision :shell, :inline => "mv /tmp/kube-bootstrap-env /etc/kube-bootstrap-env", :privileged => true

      worker.vm.provision :file, :source => worker_config_file.path, :destination => "/tmp/vagrantfile-user-data"
      worker.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
    end
  end

end
