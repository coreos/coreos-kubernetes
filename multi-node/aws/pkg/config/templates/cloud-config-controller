#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_endpoints: {{ .ETCDEndpoints }}
  etcd2:
    name: controller
    advertise-client-urls: http://$private_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379
    listen-peer-urls: http://0.0.0.0:2380
    initial-cluster: controller=http://$private_ipv4:2380
  units:
    - name: etcd2.service
      command: start

    - name: docker.service
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service

    - name: flanneld.service
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/curl --silent -X PUT -d \
            "value={\"Network\" : \"{{.PodCIDR}}\", \"Backend\" : {\"Type\" : \"vxlan\"}}" \
            http://localhost:2379/v2/keys/coreos.com/network/config?prevExist=false
    - name: kubelet.service
      command: start
      enable: true
      content: |
        [Service]
        Environment=KUBELET_VERSION={{.K8sVer}}
        Environment=KUBELET_ACI={{.HyperkubeImageRepo}}
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --api-servers=http://localhost:8080 \
        --register-schedulable=false \
        --allow-privileged=true \
        --config=/etc/kubernetes/manifests \
        --cluster_dns={{.DNSServiceIP}} \
        --cluster_domain=cluster.local
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: decrypt-tls-assets.service
      enable: true
      content: |
        [Unit]
        Description=decrypt kubelet tls assets using amazon kms
        Before=kubelet.service
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/decrypt-tls-assets

        [Install]
        RequiredBy=kubelet.service

    - name: install-kube-system.service
      command: start
      content: |
        [Unit]
        Requires=kubelet.service docker.service
        After=kubelet.service docker.service

        [Service]
        Type=simple
        StartLimitInterval=0
        Restart=on-failure
        ExecStartPre=/usr/bin/curl http://127.0.0.1:8080/version
        ExecStart=/opt/bin/install-kube-system

write_files:
  - path: /opt/bin/install-kube-system
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -e
      /usr/bin/curl -H "Content-Type: application/json" -XPOST -d @"/srv/kubernetes/manifests/kube-system.json" "http://127.0.0.1:8080/api/v1/namespaces"

      for manifest in {kube-dns,heapster}-rc.json;do
          /usr/bin/curl  -H "Content-Type: application/json" -XPOST \
          -d @"/srv/kubernetes/manifests/$manifest" \
          "http://127.0.0.1:8080/api/v1/namespaces/kube-system/replicationcontrollers"
      done
      for manifest in {kube-dns,heapster}-svc.json;do
          /usr/bin/curl  -H "Content-Type: application/json" -XPOST \
          -d @"/srv/kubernetes/manifests/$manifest" \
          "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services"
      done

  - path: /opt/bin/decrypt-tls-assets
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      for encKey in $(find /etc/kubernetes/ssl/*.pem);do
        tmpPath="/tmp/$(basename $encKey).tmp"
        docker run --rm -v /etc/kubernetes/ssl:/etc/kubernetes/ssl --rm quay.io/coreos/awscli aws --region {{.Region}} kms decrypt --ciphertext-blob fileb://$encKey --output text --query Plaintext | base64 --decode > $tmpPath
        mv  $tmpPath $encKey
      done


  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-proxy
          namespace: kube-system
        spec:
          hostNetwork: true
          containers:
          - name: kube-proxy
            image: {{.HyperkubeImageRepo}}:{{.K8sVer}}
            command:
            - /hyperkube
            - proxy
            - --master=http://127.0.0.1:8080
            - --proxy-mode=iptables
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /etc/ssl/certs
              name: ssl-certs-host
              readOnly: true
          volumes:
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host

  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: {{.HyperkubeImageRepo}}:{{.K8sVer}}
          command:
          - /hyperkube
          - apiserver
          - --bind-address=0.0.0.0
          - --etcd-servers=http://localhost:2379
          - --allow-privileged=true
          - --service-cluster-ip-range={{.ServiceCIDR}}
          - --secure-port=443
          - --advertise-address=$private_ipv4
          - --admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
          - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
          - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --runtime-config=extensions/v1beta1/deployments=true,extensions/v1beta1/daemonsets=true
          - --cloud-provider=aws
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host

  - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
      spec:
        containers:
        - name: kube-controller-manager
          image: {{.HyperkubeImageRepo}}:{{.K8sVer}}
          command:
          - /hyperkube
          - controller-manager
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --root-ca-file=/etc/kubernetes/ssl/ca.pem
          - --cloud-provider=aws
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        hostNetwork: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host

  - path: /etc/kubernetes/manifests/kube-scheduler.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: {{.HyperkubeImageRepo}}:{{.K8sVer}}
          command:
          - /hyperkube
          - scheduler
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 1

  - path: /srv/kubernetes/manifests/kube-system.json
    content: |
        {
          "apiVersion": "v1",
          "kind": "Namespace",
          "metadata": {
            "name": "kube-system"
          }
        }

  - path: /srv/kubernetes/manifests/kube-dns-rc.json
    content: |
        {
          "apiVersion": "v1",
          "kind": "ReplicationController",
          "metadata": {
            "labels": {
              "k8s-app": "kube-dns",
              "kubernetes.io/cluster-service": "true",
              "version": "v11"
            },
            "name": "kube-dns-v11",
            "namespace": "kube-system"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "k8s-app": "kube-dns",
              "version": "v11"
            },
            "template": {
              "metadata": {
                "labels": {
                  "k8s-app": "kube-dns",
                  "kubernetes.io/cluster-service": "true",
                  "version": "v11"
                }
              },
              "spec": {
                "containers": [
                  {
                    "command": [
                      "/usr/local/bin/etcd",
                      "-data-dir",
                      "/var/etcd/data",
                      "-listen-client-urls",
                      "http://127.0.0.1:2379,http://127.0.0.1:4001",
                      "-advertise-client-urls",
                      "http://127.0.0.1:2379,http://127.0.0.1:4001",
                      "-initial-cluster-token",
                      "skydns-etcd"
                    ],
                    "image": "gcr.io/google_containers/etcd:2.2.1",
                    "name": "etcd",
                    "resources": {
                      "requests": {
                        "cpu": "100m",
                        "memory": "50Mi"
                      },
                      "limits": {
                        "cpu": "100m",
                        "memory": "500Mi"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/etcd/data",
                        "name": "etcd-storage"
                      }
                    ],
                    "terminationMessagePath": "/dev/termination-log",
                    "imagePullPolicy": "IfNotPresent"
                  },
                  {
                    "args": [
                      "--domain=cluster.local"
                    ],
                    "image": "gcr.io/google_containers/kube2sky:1.14",
                    "name": "kube2sky",
                    "livenessProbe": {
                      "successThreshold": 1, 
                      "initialDelaySeconds": 60, 
                      "httpGet": {
                        "path": "/healthz", 
                        "scheme": "HTTP", 
                        "port": 8080
                      }, 
                      "timeoutSeconds": 5, 
                      "failureThreshold": 5
                    }, 
                    "readinessProbe": {
                      "initialDelaySeconds": 30, 
                      "httpGet": {
                        "path": "/readiness", 
                        "scheme": "HTTP", 
                        "port": 8081
                      }, 
                      "timeoutSeconds": 5
                    }, 
                    "resources": {
                      "requests": {
                        "cpu": "100m", 
                        "memory": "50Mi"
                      }, 
                      "limits": {
                        "cpu": "100m",
                        "memory": "200Mi"
                      }
                    }
                  },
                  {
                    "args": [
                      "-machines=http://localhost:4001",
                      "-addr=0.0.0.0:53",
                      "-ns-rotate=false", 
                      "-domain=cluster.local."
                    ],
                    "image": "gcr.io/google_containers/skydns:2015-10-13-8c72f8c",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/healthz",
                        "port": 8080,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 60,
                      "timeoutSeconds": 5,
                      "periodSeconds": 10,
                      "successThreshold": 1,
                      "failureThreshold": 3
                    },
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/readiness",
                        "port": 8081,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 5,
                      "periodSeconds": 10,
                      "successThreshold": 1,
                      "failureThreshold": 3
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "imagePullPolicy": "IfNotPresent"
                  },
                  {
                    "args": [
                      "-machines=http://localhost:4001",
                      "-addr=0.0.0.0:53",
                      "-ns-rotate=false",
                      "-domain=cluster.local."
                    ],
                    "image": "gcr.io/google_containers/skydns:2015-10-13-8c72f8c",
                    "name": "skydns",
                    "ports": [
                      {
                        "containerPort": 53,
                        "name": "dns",
                        "protocol": "UDP"
                      },
                      {
                        "containerPort": 53,
                        "name": "dns-tcp",
                        "protocol": "TCP"
                      }
                    ],
                    "resources": {
                      "requests": {
                        "cpu": "100m", 
                        "memory": "50Mi"
                      }, 
                      "limits": {
                        "cpu": "100m",
                        "memory": "200Mi"
                      }
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "imagePullPolicy": "IfNotPresent"
                  },
                  {
                    "args": [
                      "-cmd=nslookup kubernetes.default.svc.cluster.local localhost >/dev/null",
                      "-port=8080"
                    ],
                    "image": "gcr.io/google_containers/exechealthz:1.0",
                    "name": "healthz",
                    "ports": [
                      {
                        "containerPort": 8080,
                        "protocol": "TCP"
                      }
                    ],
                    "resources": {
                      "requests": {
                        "cpu": "10m", 
                        "memory": "20Mi"
                      }, 
                      "limits": {
                        "cpu": "10m",
                        "memory": "20Mi"
                      }
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "imagePullPolicy": "IfNotPresent"
                  }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "volumes": [
                  {
                    "emptyDir": {},
                    "name": "etcd-storage"
                  }
                ],
                "securityContext": {}
              }
            }
          }
        }

  - path: /srv/kubernetes/manifests/kube-dns-svc.json
    content: |
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "kube-dns",
            "namespace": "kube-system",
            "labels": {
              "k8s-app": "kube-dns",
              "kubernetes.io/name": "KubeDNS",
              "kubernetes.io/cluster-service": "true"
            }
          },
          "spec": {
            "clusterIP": "{{.DNSServiceIP}}",
            "ports": [
              {
                "protocol": "UDP",
                "name": "dns",
                "port": 53
              },
              {
                "protocol": "TCP",
                "name": "dns-tcp",
                "port": 53
              }
            ],
            "selector": {
              "k8s-app": "kube-dns"
            }
          }
        }

  - path: /srv/kubernetes/manifests/heapster-rc.json
    content: |
        {
          "apiVersion": "v1",
          "kind": "ReplicationController",
          "metadata": {
            "name": "heapster-v1.0.0",
            "namespace": "kube-system",
            "labels": {
              "k8s-app": "heapster",
              "kubernetes.io/cluster-service": "true"
            }
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "k8s-app": "heapster"
            },
            "template": {
              "metadata": {
                "labels": {
                  "k8s-app": "heapster",
                  "kubernetes.io/cluster-service": "true"
                }
              },
              "spec": {
                "containers": [
                  {
                    "image": "gcr.io/google_containers/heapster:v1.0.0",
                    "name": "heapster",
                    "command": [
                      "/heapster",
                      "--source=kubernetes.summary_api:''",
                      "--metric_resolution=60s"
                    ],
                    "resources": {
                      "limits": {
                        "cpu": "100m",
                        "memory": "208Mi"
                      },
                      "requests": {
                        "cpu": "100m",
                        "memory": "208Mi"
                      }
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "imagePullPolicy": "IfNotPresent"
                  }
                ]
              }
            }
          }
        }

  - path: /srv/kubernetes/manifests/heapster-svc.json
    content: |
        {
          "kind": "Service",
          "apiVersion": "v1",
          "metadata": {
            "name": "heapster",
            "namespace": "kube-system",
            "labels": {
              "kubernetes.io/cluster-service": "true",
              "kubernetes.io/name": "Heapster"
            }
          },
          "spec": {
            "ports": [
              {
                "port": 80,
                "targetPort": 8082
              }
            ],
            "selector": {
              "k8s-app": "heapster"
            }
          }
        }

  - path: /etc/kubernetes/ssl/ca.pem
    encoding: gzip+base64
    content: {{.TLSConfig.CACert}}

  - path: /etc/kubernetes/ssl/apiserver.pem
    encoding: gzip+base64
    content: {{.TLSConfig.APIServerCert}}

  - path: /etc/kubernetes/ssl/apiserver-key.pem
    encoding: gzip+base64
    content: {{.TLSConfig.APIServerKey}}
