# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'
require_relative '../lib/create_ssl.rb'

Vagrant.require_version ">= 1.6.0"

$update_channel = "alpha"

CLUSTER_IP="10.3.0.1"
NODE_IP = "172.17.4.99"
NODE_MEMORY_SIZE = 2048
USER_DATA_PATH = File.expand_path("user-data")
CERT_BASE_DIR="ssl"

FileUtils.mkdir_p(CERT_BASE_DIR)

CA_CERT_PATHS = create_ca_cert(CERT_BASE_DIR)
API_CERT_PATHS = create_ssl_cert(CERT_BASE_DIR, "apiserver", "controller", [NODE_IP, CLUSTER_IP], CA_CERT_PATHS)
ADMIN_CERT_PATHS = create_ssl_cert(CERT_BASE_DIR, "admin", "kube-admin", [], CA_CERT_PATHS)

Vagrant.configure("2") do |config|
  # always use Vagrant's insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = ">= 1151.0.0"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json" % $update_channel

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v, override|
      v.vmx['numvcpus'] = 1
      v.vmx['memsize'] = NODE_MEMORY_SIZE
      v.gui = false

      override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json" % $update_channel
    end
  end

  config.vm.provider :virtualbox do |v|
    v.cpus = 1
    v.gui = false
    v.memory = NODE_MEMORY_SIZE

    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.network :private_network, ip: NODE_IP

  [CA_CERT_PATHS, API_CERT_PATHS, ADMIN_CERT_PATHS].each do |cert|
    [:key, :pem].each do |k|
      config.vm.provision(
        :file,
        :source => cert[k],
        :destination => "/tmp/ssl/#{File.basename(cert[k])}"
      )
    end
  end

  config.vm.provision(
    :shell,
    :inline => (
      "mkdir -p /etc/kubernetes/ssl" \
      " && " \
      "mv -f /tmp/ssl/* /etc/kubernetes/ssl"
    ),
    :privileged => true
  )

  config.vm.provision :file, :source => USER_DATA_PATH, :destination => "/tmp/vagrantfile-user-data"
  config.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
end
