# Unique name of Kubernetes cluster. In order to deploy
# more than one cluster into the same AWS account, this
# name must not conflict with an existing cluster.
clusterName: {{.ClusterName}}

# DNS name routable to the Kubernetes controller nodes
# from worker nodes and external clients. Configure the options
# below if you'd like kube-aws to create a Route53 record sets/hosted zones
# for you.  Otherwise the deployer is responsible for making this name routable
externalDNSName: {{.ExternalDNSName}}

# CoreOS release channel to use. Currently supported options: [ alpha, beta ]
# See coreos.com/releases for more information
#releaseChannel: alpha

# Set to true if you want kube-aws to create a Route53 A Record for you.
#createRecordSet: false

# TTL in seconds for the Route53 RecordSet created if createRecordSet is set to true.
#recordSetTTL: 300

# DEPRECATED: use hostedZoneId instead
# The name of the hosted zone to add the externalDNSName to,
# E.g: "google.com".  This needs to already exist, kube-aws will not create
# it for you.
#hostedZone: ""

# The ID of hosted zone to add the externalDNSName to.
# Either specify hostedZoneId or hostedZone, but not both
#hostedZoneId: ""

# Name of the SSH keypair already loaded into the AWS
# account being used to deploy this cluster.
keyName: {{.KeyName}}

# Region to provision Kubernetes cluster
region: {{.Region}}

# Availability Zone to provision Kubernetes cluster when placing nodes in a single availability zone (not highly-available) Comment out for multi availability zone setting and use the below `subnets` section instead.
availabilityZone: {{.AvailabilityZone}}

# ARN of the KMS key used to encrypt TLS assets.
kmsKeyArn: "{{.KMSKeyARN}}"

# Instance type for etcd node
#etcdInstanceType: m3.medium

# Disk size (GiB) for etcd node
#etcdRootVolumeSize: 8

# Instance type for controller node
#controllerInstanceType: m3.medium

# Disk size (GiB) for controller node
#controllerRootVolumeSize: 30

# Number of worker nodes to create
#workerCount: 1

# Instance type for worker nodes
#workerInstanceType: m3.medium

# Disk size (GiB) for worker nodes
#workerRootVolumeSize: 30

# Price (Dollars) to bid for spot instances. Omit for on-demand instances.
# workerSpotPrice: "0.05"

# ID of existing VPC to create subnet in. Leave blank to create a new VPC
# vpcId:

# ID of existing route table in existing VPC to attach subnet to. Leave blank to use the VPC's main route table.
# routeTableId:

# CIDR for Kubernetes VPC. If vpcId is specified, must match the CIDR of existing vpc.
# vpcCIDR: "10.0.0.0/16"

# CIDR for Kubernetes subnet when placing nodes in a single availability zone (not highly-available) Leave commented out for multi availability zone setting and use the below `subnets` section instead.
# instanceCIDR: "10.0.0.0/24"

# Kubernetes subnets with their CIDRs and availability zones. Differentiating availability zone for 2 or more subnets result in high-availability (failures of a single availability zone won't result in immediate downtimes)
# subnets:
#   - availabilityZone: us-west-1a
#     instanceCIDR: "10.0.0.0/24"
#   - availabilityZone: us-west-1b
#     instanceCIDR: "10.0.1.0/24"
#   - availabilityZone: us-west-1c
#     instanceCIDR: "10.0.2.0/24"

# IP Addresses for dedicated etcd instances (this implicitly determines the number of dedicated etcd instances).
# Leave empty to run etcd on a single master node.
# For a high-availability deployment it is recommended to use three nodes, each in a different availability zone.
# etcdIPs:
#   - 10.0.0.20
#   - 10.0.1.20
#   - 10.0.2.20

# IP Address for the controller in Kubernetes subnet. When we have 2 or more subnets, the controller is placed in the first subnet and controllerIP must be included in the instanceCIDR of the first subnet. This convention will change once we have H/A controllers
# controllerIP: 10.0.0.50

# CIDR for all service IP addresses
# serviceCIDR: "10.3.0.0/24"

# CIDR for all pod IP addresses
# podCIDR: "10.2.0.0/16"

# IP address of Kubernetes dns service (must be contained by serviceCIDR)
# dnsServiceIP: 10.3.0.10

# Version of hyperkube image to use. This is the tag for the hyperkube image repository.
# kubernetesVersion: v1.2.4_coreos.1

# Hyperkube image repository to use.
# hyperkubeImageRepo: quay.io/coreos/hyperkube

# Use Calico for network policy. When set to "true" the kubernetesVersion (above)
# must also be updated to include a version tagged with CNI e.g. v1.2.4_coreos.cni.1
# useCalico: false

# AWS Tags for cloudformation stack resources
#stackTags:
#  Name: "Kubernetes"
#  Environment: "Production"
